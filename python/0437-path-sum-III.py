# LeetCode Problem 437: Path Sum III
# Link: https://leetcode.com/problems/path-sum-iii/
# Difficulty: Medium

# âœ… Approach 1: Brute Force with DFS from each node
# ðŸ§  Idea:
# - Para cada nÃ³, fazemos uma DFS tentando achar todos os caminhos a partir dele que somam targetSum.
# - Fazemos isso recursivamente para cada subÃ¡rvore.

# ðŸ•’ Time Complexity: O(n^2) no pior caso (em Ã¡rvores nÃ£o balanceadas)
# ðŸ§  Space Complexity: O(h) para profundidade da recursÃ£o

class Solution:
    def dfs(self, node, curr_sum, target):
        if not node:
            return 0

        curr_sum += node.val
        count = 1 if curr_sum == target else 0

        count += self.dfs(node.left, curr_sum, target)
        count += self.dfs(node.right, curr_sum, target)

        return count

    def pathSum(self, root, targetSum):
        if not root:
            return 0

        return (self.dfs(root, 0, targetSum)
                + self.pathSum(root.left, targetSum)
                + self.pathSum(root.right, targetSum))


# âœ… Approach 2: Optimized DFS with Prefix Sum (using HashMap)
# ðŸ§  Idea:
# - Usamos um dicionÃ¡rio para armazenar a soma acumulada atÃ© cada ponto do caminho.
# - Se em algum ponto curr_sum - targetSum jÃ¡ foi visto, existe um caminho com soma targetSum.
# - Backtrack Ã© usado para desfazer o estado ao voltar da recursÃ£o.

# ðŸ•’ Time Complexity: O(n)
# ðŸ§  Space Complexity: O(n) com dicionÃ¡rio e stack

class Solution:
    def pathSum(self, root, targetSum):
        def dfs(node, curr_sum, prefix_sums):
            if not node:
                return 0

            curr_sum += node.val
            count = prefix_sums.get(curr_sum - targetSum, 0)

            prefix_sums[curr_sum] = prefix_sums.get(curr_sum, 0) + 1

            count += dfs(node.left, curr_sum, prefix_sums)
            count += dfs(node.right, curr_sum, prefix_sums)

            prefix_sums[curr_sum] -= 1  # backtrack
            return count

        prefix_sums = {0: 1}  # soma nula jÃ¡ "existe"
        return dfs(root, 0, prefix_sums)
